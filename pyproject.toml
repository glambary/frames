[tool.poetry]
name = "frames"
version = "0.1.0"
description = ""
authors = ["shadkevich <s.hadkevich@agima.ru>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11.5,<3.12"
ezdxf = "^1.3.4"
openpyxl = "^3.1.5"
pydantic = "^2.9.2"
pyinstaller = "^6.11.1"
wmi = { version = "^1.5.1", markers = "sys_platform == 'win32'" }

[tool.poetry.group.dev.dependencies]
deptry = "^0.16.1"

pytest = "7.4.2"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.0"
pytest-randomly = "^3.12"
pytest-timeout = "^2.1"
pytest-cases = "^3.8.0"
pytest-factoryboy = "^2.5.1"
pytest-xdist = "^3.3.1"
mimesis = "^11.1.0"
factory-boy = "^3.3.0"
sqlalchemy-utils = "^0.41.1"
python-memcached = "^1.62"
fakeredis = "^2.22.0"
covdefaults = "^2.2.0"
hypothesis = "^6.61"
coverage = "^7.3.1"
types-requests = "^2.28"
wemake-python-styleguide = "^0.18.0"


ruff = "^0.4.1"
isort = "^5.13.2"
pre-commit = "^3.7.1"
mypy = "^1.11.2"



[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"



[tool.pytest.ini_options]
asyncio_mode = "auto"
pythonpath = [".", "src"]



# линтеры и форматеры
# ---------------------------------------------------------------------------
[tool.mypy]
python_version = "3.11"
mypy_path = "src"
plugins = ["pydantic.mypy"]
exclude =  ["src/scripts/"]


follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "testcontainers.*"
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.coverage.run]
relative_files = true
source = ["src/"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    "def upgrade",
    "def downgrade",
    ]

ignore_errors = true
